name: 测试和质量检查

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'front_end/**'
      - 'back_end/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'front_end/**'
      - 'back_end/**'
      - '.github/workflows/**'

jobs:
  # 前端测试
  frontend-tests:
    name: 前端测试
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 安装依赖
      working-directory: ./front_end
      run: npm ci
      
    - name: 运行代码检查
      working-directory: ./front_end
      run: npm run lint
      
    - name: 运行单元测试
      working-directory: ./front_end
      run: npm run test:unit -- --ci
      
    - name: 运行集成测试
      working-directory: ./front_end
      run: npm run test:integration -- --ci
      
    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: ./front_end/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results-${{ matrix.node-version }}
        path: |
          front_end/coverage/
          front_end/test-results/

  # 端到端测试
  e2e-tests:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: frontend-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: 安装前端依赖
      working-directory: ./front_end
      run: npm ci
      
    - name: 安装后端依赖
      working-directory: ./back_end
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 启动后端服务
      working-directory: ./back_end
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: 启动前端服务
      working-directory: ./front_end
      run: |
        npm run dev &
        sleep 10
        
    - name: 等待服务启动
      run: |
        npx wait-on http://localhost:8080 --timeout 60000
        npx wait-on http://localhost:8000/health --timeout 60000
        
    - name: 运行Cypress测试
      working-directory: ./front_end
      run: npm run test:e2e -- --ci
      env:
        CYPRESS_BASE_URL: http://localhost:8080
        
    - name: 上传Cypress截图
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: front_end/tests/e2e/screenshots/
        
    - name: 上传Cypress视频
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: front_end/tests/e2e/videos/

  # 后端测试
  backend-tests:
    name: 后端测试
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 安装依赖
      working-directory: ./back_end
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: 运行后端测试
      working-directory: ./back_end
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: 上传后端覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: ./back_end/coverage.xml
        flags: backend
        name: backend-coverage

  # 性能测试
  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: 安装依赖
      run: |
        cd front_end && npm ci
        cd ../back_end && pip install -r requirements.txt
        
    - name: 启动服务
      run: |
        cd back_end && python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        cd front_end && npm run dev &
        sleep 15
        
    - name: 运行Lighthouse性能测试
      working-directory: ./front_end
      run: npm run test:performance -- --ci
      
    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: front_end/performance-report.json

  # 可访问性测试
  accessibility-tests:
    name: 可访问性测试
    runs-on: ubuntu-latest
    needs: frontend-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 安装依赖
      working-directory: ./front_end
      run: npm ci
      
    - name: 启动前端服务
      working-directory: ./front_end
      run: |
        npm run dev &
        sleep 10
        
    - name: 运行可访问性测试
      working-directory: ./front_end
      run: npm run test:accessibility -- --ci
      
    - name: 上传可访问性报告
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: front_end/accessibility-report.json

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传Trivy扫描结果到GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 运行npm audit
      working-directory: ./front_end
      run: |
        npm audit --audit-level=high
        
    - name: 运行Python安全检查
      working-directory: ./back_end
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          back_end/bandit-report.json
          back_end/safety-report.json

  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud需要完整历史
        
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: 安装依赖
      run: |
        cd front_end && npm ci
        cd ../back_end && pip install -r requirements.txt
        
    - name: 运行测试生成覆盖率
      run: |
        cd front_end && npm run test:coverage -- --ci
        cd ../back_end && pytest tests/ --cov=. --cov-report=xml
        
    - name: SonarCloud扫描
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 构建和部署测试
  build-test:
    name: 构建测试
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: front_end/package-lock.json
        
    - name: 安装前端依赖
      working-directory: ./front_end
      run: npm ci
      
    - name: 构建前端
      working-directory: ./front_end
      run: npm run build
      
    - name: 分析构建产物
      working-directory: ./front_end
      run: |
        ls -la dist/
        du -sh dist/
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: front_end/dist/

  # 通知和报告
  notify:
    name: 通知结果
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, performance-tests, accessibility-tests, security-scan, code-quality, build-test]
    if: always()
    
    steps:
    - name: 检查测试结果
      run: |
        echo "前端测试: ${{ needs.frontend-tests.result }}"
        echo "后端测试: ${{ needs.backend-tests.result }}"
        echo "端到端测试: ${{ needs.e2e-tests.result }}"
        echo "性能测试: ${{ needs.performance-tests.result }}"
        echo "可访问性测试: ${{ needs.accessibility-tests.result }}"
        echo "安全扫描: ${{ needs.security-scan.result }}"
        echo "代码质量: ${{ needs.code-quality.result }}"
        echo "构建测试: ${{ needs.build-test.result }}"
        
    - name: 发送通知 (可选)
      if: failure()
      run: |
        echo "测试失败，需要检查！"
        # 这里可以添加发送邮件、Slack通知等逻辑